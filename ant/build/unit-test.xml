<project name="grails-unit-test">
                 
  <condition property="_skipTests_">
    <istrue value="${skipTests}"/>
  </condition>

	<target name="test-with-coverage" depends="build-test, instrument-for-coverage, run-test,test-report,coverage-report" description="Compile and Run the unit tests while measuring coverage">
		<fail if="grails.test.failure">The tests failed. Have a look at ${grails.test.reports}</fail>
	</target>
	<target name="test" depends="clean-instrumented, run-test,test-report" unless="_skipTests_" description="Compile and Run the unit tests plainly">
		<fail if="grails.test.failure">The tests failed. Have a look at ${grails.test.reports}</fail>
	</target>

	<taskdef resource="tasks.properties">
		<classpath>
			<pathelement path="${grails.build}" />
			<fileset dir="cruise/coverage/lib" includes="*.jar" />
		</classpath>
		<classpath refid="classpath" />
	</taskdef>
	<taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc">
		<classpath refid="classpath" />
	</taskdef>


	<property name="coverage.build" value="cruise/coverage/build/instrumented-classes" />
	<property name="coverage.report" value="cruise/coverage/report" />

	<target name="clean-instrumented">
		<delete quiet="true" dir="${coverage.build}" />
		<mkdir dir="${coverage.build}" />
	</target>

	<target name="instrument-for-coverage" depends="clean-instrumented">
		<delete file="cobertura.ser" quiet="true" />
		<cobertura-instrument todir="${coverage.build}">
			<fileset dir="${grails.build}" includes="**/*.class" />
		</cobertura-instrument>
	</target>

	<target name="coverage-report">
		<delete quiet="true">
			<fileset dir="${coverage.report}" />
		</delete>
		<mkdir dir="${coverage.report}" />
		<cobertura-report format="html" destdir="cruise/coverage/report">
			<fileset dir="${grails.src.commons}" />
			<fileset dir="${grails.src.groovy}" />
			<fileset dir="${grails.src.web}" />
			<fileset dir="${grails.src.persistence}" />
			<fileset dir="${grails.src.scaffolding}" />
		</cobertura-report>
	</target>

	<target name="build-test" depends="build">

		<groovyc srcdir="test/groovy" destdir="${grails.test.build}"  >
            <src path="${grails.test.src.commons}" />
            <src path="${grails.test.src.web}" />
            <src path="${grails.test.src.persistence}" />
            <src path="${grails.test.src.scaffolding}" />
            <src path="test/groovy" />
            <javac debug="on" deprecation="on" encoding="UTF-8"/>
            <classpath refid="classpath" />
			<classpath location="${grails.test.build}" />
			<classpath location="${grails.build}" />
		</groovyc>

        <antcall target="build-test:java5" />
    </target>

    <target name="build-test:java5" depends="build:checkj5" if="is.java.5">
        <!--build java 5 sources-->
        <echo>Building Java 5 Test Sources</echo>
        <groovyc destdir="${grails.test.build}" encoding="UTF-8">
            <src path="test/tiger" />
            <javac debug="on" deprecation="on" encoding="UTF-8"/>
            <classpath location="${grails.test.build}" />
            <classpath location="${grails.build}" />
   			<classpath refid="classpath"/>
		</groovyc>
    </target>

    <target name="defineTestingScope">
		<!--Sets the test value to all tests ('*') if no value is provided-->
		<condition property="test" value="*">
			<not>
				<isset property="test" />
			</not>
		</condition>
		<condition property="test.isolated" value="true">
			<equals arg1="${test}" arg2="*" />
		</condition>
	</target>

	<target name="run-test" depends="defineTestingScope, build-test" unless="_skipTests_">
		<delete dir="${grails.test.reports}" />
        <mkdir dir="${grails.test.reports}" />
        <echo>Test being run ${test} from ${grails.test.build}</echo>
        <junit fork="true" maxmemory="1G" forkmode="once">
			<!-- only fork VMs as needed -->
            <sysproperty key="grails.cli.testing" value="true"/>
            <jvmarg value="-server" />
			<jvmarg value="-Xmx1G" />
			<jvmarg value="-XX:MaxPermSize=256m"/>
			<classpath location="${coverage.build}" />
			<!-- must be first in cp!    -->
			<classpath location="cruise/coverage/lib/cobertura.jar" />
			<!-- only neede for coverage -->
			<classpath refid="classpath" />
			<classpath location="${grails.test.build}" />
			<classpath location="${grails.test.src.web}" />
			<classpath location="${grails.test.src.commons}" />
			<classpath location="${grails.test.src.persistence}" />
			<classpath location="${grails.test.src.scaffolding}" />
			<classpath location="${grails.test.src.groovy}" />
            <classpath location="${grails.test.src.tiger}" />
            <!-- needed to load codecs -->
            <classpath location="${grails.src.codecs}" />
            <formatter type="xml" />
            <batchtest todir="${grails.test.reports}" failureproperty="grails.test.failure">
				<fileset dir="${grails.test.build}">
					<include name="**/${test}Tests.class" />
					<exclude name="**/Abstract*" />
                    <exclude name="**/TransactionalServiceReloadTests*" />
				</fileset>
			</batchtest>
			<test todir="${grails.test.reports}" name="org.codehaus.groovy.grails.reload.TransactionalServiceReloadTests" fork="true" if="test.isolated" />

		</junit>
	</target>

	<target name="test-report" depends="clean-instrumented, run-test" description="Runs unit tests and generates HTML report">
		<mkdir dir="${grails.test.html.reports}" />
		<junitreport todir="${grails.test.html.reports}">
			<fileset dir="${grails.test.reports}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${grails.test.html.reports}" />
		</junitreport>
		<fail if="grails.test.failure">The tests failed. Have a look at ${grails.test.html.reports}/index.html</fail>
	</target>
</project>
